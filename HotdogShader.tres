[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;

uniform sampler2D baseMap : hint_albedo;
uniform sampler2D noiseMap : hint_albedo; 
uniform sampler2D moldMap : hint_albedo;
uniform float threshold : hint_range(0.05, 1.0, 0.05);
uniform float offset : hint_range(0.0, 1.0, 0.0);

uniform float uv1_blend_sharpness;
varying vec3 uv1_triplanar_pos;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}

void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}

void fragment() {
	float noise = mod(triplanar_texture(noiseMap, uv1_power_normal, uv1_triplanar_pos).x, threshold) + offset;
	vec4 base = triplanar_texture(baseMap, uv1_power_normal, uv1_triplanar_pos); 
	vec4 mold = triplanar_texture(moldMap, uv1_power_normal, uv1_triplanar_pos); 
	
	ALBEDO = vec3(
		mix(base.x, mold.x, noise),
		mix(base.y, mold.y, noise),
		mix(base.z, mold.z, noise)
	);
}"
